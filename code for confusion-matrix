import sys
import numpy as np
import tensorflow as tf
from keras.models import load_model
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
from matplotlib import style
style.use('ggplot')

# Redirect stdout to a log file with UTF-8 encoding
old_stdout = sys.stdout
log_file = open("summary.log", "w", encoding="utf-8")
sys.stdout = log_file

# Load MNIST Data
print('\nLoading MNIST Data...')
(train_img, train_labels), (test_img, test_labels) = tf.keras.datasets.mnist.load_data()

# Normalize and reshape data for the Keras model
train_img = train_img.reshape(-1, 28, 28, 1) / 255.0
test_img = test_img.reshape(-1, 28, 28, 1) / 255.0

# One-hot encode the labels
train_labels = tf.keras.utils.to_categorical(train_labels, 10)
test_labels = tf.keras.utils.to_categorical(test_labels, 10)

# Load the pre-trained Keras model
MODEL = load_model("my_trained_model.keras")

# Evaluate the model on the training data
print('\nEvaluating Model on Training Data...')
train_loss, train_accuracy = MODEL.evaluate(train_img, train_labels, verbose=0)
print('\nTraining Data Accuracy: {:.2f}%'.format(train_accuracy * 100))

# Evaluate the model on the testing data
print('\nEvaluating Model on Testing Data...')
test_loss, test_accuracy = MODEL.evaluate(test_img, test_labels, verbose=0)
print('\nTesting Data Accuracy: {:.2f}%'.format(test_accuracy * 100))

# Predict on the test data
print('\nMaking Predictions on Test Input Images...')
test_labels_pred = np.argmax(MODEL.predict(test_img), axis=1)

# Calculate accuracy on the test data
print('\nCalculating Accuracy of Predictions...')
accuracy = accuracy_score(np.argmax(test_labels, axis=1), test_labels_pred)
print('\nAccuracy of Classifier on Test Images: {:.2f}%'.format(accuracy * 100))

# Create confusion matrix
print('\nCreating Confusion Matrix...')
conf_mat_test = confusion_matrix(np.argmax(test_labels, axis=1), test_labels_pred)
print('\nConfusion Matrix for Test Data: \n', conf_mat_test)

# Plot Confusion Matrix for Test Data
plt.matshow(conf_mat_test)
plt.title('Confusion Matrix for Test Data')
plt.colorbar()
plt.ylabel('True label')
plt.xlabel('Predicted label')
plt.axis('off')
plt.show()

# Restore stdout
sys.stdout = old_stdout
log_file.close()

# Show some test images with original and predicted labels
a = np.random.randint(0, len(test_img), 10)
for i in a:
    two_d = (np.reshape(test_img[i], (28, 28)) * 255).astype(np.uint8)
    plt.title('Original Label: {0}  Predicted Label: {1}'.format(np.argmax(test_labels[i]), test_labels_pred[i]))
    plt.imshow(two_d, interpolation='nearest', cmap='gray')
    plt.show()

